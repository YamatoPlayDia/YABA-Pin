【さらなる規格化へ】
api.jsをどのCRUDでも使えるように、かつ毎回のErrorの表示の処理も含んで汎用的かつシンプルにした。
また、Controllerの処理も似たような処理を行う部分について、Repositoryというものを使うことで簡略化してみた
（これは賛否がありそう、本来は大規模のプロジェクトでやるらしい？けど便利そうなので一旦使ってみることに）

【api.js/functions.js】
みてもらうのが一番早いと思います。
・どのCRUDでも使えるように、かつ毎回のErrorの表示の処理も含んで汎用的かつシンプルに
・APIのエンドポイントを引数に設定しています
・axiosを導入
エラーハンドリングが簡単: fetchはネットワークエラーの場合のみ例外をスローします。それに対しAxiosはHTTPエラーステータスに対しても例外をスローします。
自動JSONデータ変換: Axiosは自動的にJSONデータをJavaScriptのオブジェクトに変換します。fetchの場合は手動で変換する必要があります。
リクエストとレスポンスの中断: Axiosはリクエストとレスポンスを中断する機能を提供します。
ブラウザとNode.jsの両方で動作: AxiosはブラウザとNode.jsの両方で動作します。

【Controller/Repository】
みてもらうのが一番早いと思います。
設定したら、Laravelプロジェクトのディレクトリにて、composer dump-autoloadのコマンドを実行する必要があります。
https://www.webopixel.net/php/1454.html
正直余計複雑な気がするので、oldにあるProfileControllerを適用して、Repositoryはディレクトリごと無くした状態でもいいと思います。